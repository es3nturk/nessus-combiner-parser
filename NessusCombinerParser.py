# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from glob import glob
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from pathlib import Path
import sys

#--------------libraries-----------------
from ast import arg
from turtle import title
from typing import TYPE_CHECKING, Tuple
if TYPE_CHECKING:
    from _typeshed import SupportsLenAndGetItem
#from _typeshed import SupportsLenAndGetItem
from os import  terminal_size
from typing import Dict, Protocol
import xml.etree.ElementTree as ET
import xlsxwriter 
import openpyxl
from openpyxl import load_workbook
from openpyxl import Workbook
from openpyxl.styles import Color, PatternFill, Font, Border
from openpyxl.styles import colors
from openpyxl.cell import Cell
from openpyxl.styles import Alignment 

import sys
from time import sleep

#nmap parser include
import pandas as pd
import sys
import argparse

#for better resolve in progress bar
import threading
#---------------libraries-------------------


#----------------------- prejudgement rules -------------------------------------------

# =============   LAN  =========================
# ================  write X  ====================
f_lan_write=[66173]

# ================     don't write 0  ==============
f_lan_dnt_write=[51192, 57582, 45411, 10815, 12085, 142960, 136929, 121479, 11213, 40984, 85582, 11714, 26194, 34850, 42057, 98060, 58363]

# ================  control, Check?   ===========
f_lan_control=[50686]
# ====================**==========================



# =============  Internet  ====================
# ==============   write X  =============
f_internet_write=[51192, 57582, 45411, 66173]

# ============ don't write 0 ============
f_internet_dnt_write=[10815, 12085, 142960, 136929, 121479, 11213, 40984, 85582, 11714, 26194, 34850, 42057, 98060, 58363]

# ==========  control, check?  ==========
f_internet_control=[50686]
# ====================**==========================


# ====== credentials are in different wordbook ==
f_credential = [42411] 

#repeated keywords , dont worry about case sensitivity , add the word at en end of the list
#  ================================= repeat cases ==============================
repeat_keys=["apache","wordpress","vcenter server","remote desktop","kaspersky","python unsupported","ibm websphere", "oracle java se","ESXi","php","openssl","nginx","iLO 4", "IBM Spectrum","manageengine","solarwinds"]







#variables
p_nessus_files=[]
p_scan_type = "local"
p_excel_output_name = "vulnout"
f_nessus_files = []
f_db_file=""
f_excel_ip_list = ""
f_vuln_excel_file = ""
data = []
p_r_name= ""

class Ui_Dialog(object):
    global p_nessus_files
    global p_scan_type
    
    global p_r_name

    global f_nessus_files
    global f_db_file
    global f_excel_ip_list
    global f_vuln_excel_file

    def parseNessusXML(self,nessus_files):
        global data
        global p_excel_output_name
        for nessusfile in nessus_files:
            mytree = ET.parse(nessusfile)
            myroot = mytree.getroot()
            for ReportHost in myroot.iter("ReportHost"):
                host=""  #get name from report host
                scan_begin=""
                scan_end=""
                os=""
                mac_address=""
                ip=""
                domain_name=""
                netbios=""
                

                # inside report item
                protocol=""
                port=""
                plugin_id=""
                service_name=""
                critical=""
                write=""
                risk_factor=""
                synopsis=""
                description=""
                see_also=""   
                plugin_output=""
                exploit_available=""
                metasploit_exploit_available=""
                bid=""
                cve=""
                xref=""
                plugin_name=""
                plugin_family=""


                # gettin all
                host = ReportHost.get("name")

                for HostProperties in ReportHost[0]:
                    
                    if HostProperties.get("name") =="HOST_END":
                        scan_end=HostProperties.text
                    elif HostProperties.get("name") =="host-ip":
                        ip=HostProperties.text
                    elif HostProperties.get("name") == "HOST_START":
                        scan_begin = HostProperties.text
                    elif HostProperties.get("name") == "os":
                        os = HostProperties.text
                    elif HostProperties.get("name") == "mac-address":
                        mac_address = HostProperties.text
                    elif HostProperties.get("name") == "host-ip":
                        ip=HostProperties.text
                    elif HostProperties.get("name") =="host-fqdn":
                        domain_name = HostProperties.text
                    elif HostProperties.get("name") == "netbios-name":
                        netbios = HostProperties.text

                for vulns in ReportHost.iter("ReportItem"):
                    protocol = vulns.get("protocol")
                    port = vulns.get("port")
                    plugin_id =  vulns.get("pluginID")
                    service_name = vulns.get("svc_name")
                    critical = vulns.get("severity")
                    write = 0
                    plugin_name = vulns.get("pluginName")
                    plugin_family = vulns.get("pluginFamily")
                    risk_factor = ""
                    synopsis = ""
                    description = ""
                    see_also = ""
                    plugin_output = ""
                    exploit_available = ""
                    metasploit_exploit_available = ""
                    bid = ""
                    cve = ""
                    xref = ""
                    solution = ""
                    bid =""
                    cve = ""
                    xref = ""
                    plugin_version=""
                    vulnerability_publication_date=""
                    plugin_publication_date=""
                    cvss3_base_score=""
                    cvss3_vector=""
                    cvss_base_score=""
                    cvss_vector=""
                    
                    for inf in vulns:
                        if inf.tag == "description":
                            description = inf.text
                        elif inf.tag == "risk_factor":
                            risk_factor = inf.text
                        elif inf.tag == "plugin_output":
                            plugin_output = inf.text
                        elif inf.tag =="synopsis":
                            synopsis = inf.text
                        elif inf.tag == "description":
                            description = inf.text
                        elif inf.tag =="see_also":
                            see_also=inf.text
                        elif inf.tag == "solution":
                            solution = inf.text
                        elif inf.tag == "exploit_available":
                            exploit_available = inf.text
                        elif inf.tag == "exploit_framework_metasploit":
                            metasploit_exploit_available = inf.text
                        elif inf.tag =="bid":
                            bid=inf.text
                        elif inf.tag =="cve":
                            if cve=="":
                                cve= inf.text
                            else:
                                cve=cve + "\n" + inf.text
                        elif inf.tag =="xref":
                            xref=inf.text
                        elif inf.tag == "vuln_publication_date":
                            vulnerability_publication_date=inf.text
                        elif inf.tag == "plugin_publication_date":
                            plugin_publication_date = inf.text
                        elif inf.tag == "cvss3_base_score":
                            cvss3_base_score=inf.text
                        elif inf.tag == "cvss3_vector":
                            cvss3_vector=inf.text
                        elif inf.tag == "cvss_base_score":
                            cvss_base_score=inf.text
                        elif inf.tag == "cvss_vector":
                            cvss_vector=inf.text
                    
                    data.append([p_excel_output_name,host,str(scan_begin+"\n"+scan_end),os,mac_address,ip,domain_name,netbios,protocol,int(port),int(plugin_id),service_name,int(critical),"",risk_factor,plugin_name,synopsis,description,solution,see_also,plugin_output,exploit_available,metasploit_exploit_available,bid,cve,xref,plugin_family,plugin_version,vulnerability_publication_date,plugin_publication_date,cvss3_base_score,cvss3_vector,cvss_base_score,cvss_vector])

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(496, 551)
        self.panel = QtWidgets.QTabWidget(Dialog)
        self.panel.setGeometry(QtCore.QRect(0, 0, 501, 551))
        self.panel.setObjectName("panel")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        font = QtGui.QFont()
        font.setPointSize(11)
        self.p_button_nessus_file_select = QtWidgets.QPushButton(self.tab)
        self.p_button_nessus_file_select.setGeometry(QtCore.QRect(10, 10, 171, 27))
        self.p_button_nessus_file_select.setFont(font)
        self.p_button_nessus_file_select.setStyleSheet("background-color: rgb(0, 255, 255);")
        self.p_button_nessus_file_select.setObjectName("p_button_nessus_file_select")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(10, 60, 101, 19))
        self.label_2.setObjectName("label_2")
        self.label_2.setFont(font)
        self.p_button_clear = QtWidgets.QPushButton(self.tab)
        self.p_button_clear.setGeometry(QtCore.QRect(10, 300, 88, 27))
        self.p_button_clear.setStyleSheet("background-color: rgb(255, 85, 0);\n"
        "color: rgb(255, 255, 255);")
        self.p_button_clear.setObjectName("p_button_clear")
        font.setPointSize(11)
        self.p_button_analyze = QtWidgets.QPushButton(self.tab)
        self.p_button_analyze.setGeometry(QtCore.QRect(160, 460, 171, 27))
        self.p_button_analyze.setFont(font)
        self.p_button_analyze.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.p_button_analyze.setObjectName("p_button_analyze")
        font.setPointSize(10)
        self.p_edit_output_file = QtWidgets.QLineEdit(self.tab)
        self.p_edit_output_file.setGeometry(QtCore.QRect(10, 350, 151, 25))
        self.p_edit_output_file.setFont(font)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.p_edit_output_file.setFont(font)
        self.p_edit_output_file.setObjectName("p_edit_output_file")
        self.p_swich = QtWidgets.QSlider(self.tab)
        self.p_swich.setGeometry(QtCore.QRect(180, 400, 131, 22))
        self.p_swich.setMinimum(1)
        self.p_swich.setMaximum(2)
        self.p_swich.setPageStep(1)
        self.p_swich.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.p_swich.setObjectName("p_swich")
        font.setPointSize(11)
        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(30, 430, 151, 19))
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.tab)
        self.label_6.setFont(font)
        self.label_6.setGeometry(QtCore.QRect(340, 430, 68, 19))
        self.label_6.setObjectName("label_6")
        font.setPointSize(10)
        self.p_label_nessus_file_list = QtWidgets.QTextEdit(self.tab)
        self.p_label_nessus_file_list.setFont(font)
        self.p_label_nessus_file_list.setEnabled(False)
        self.p_label_nessus_file_list.setGeometry(QtCore.QRect(20, 90, 451, 201))
        self.p_label_nessus_file_list.setReadOnly(False)
        self.p_label_nessus_file_list.setObjectName("p_label_nessus_file_list")
        self.p_progress = QtWidgets.QProgressBar(self.tab)
        self.p_progress.setEnabled(True)
        self.p_progress.setGeometry(QtCore.QRect(40, 490, 411, 23))
        self.p_progress.setProperty("value", 0)
        self.p_progress.setTextVisible(False)
        self.p_progress.setObjectName("p_progress")
        self.panel.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setPointSize(11)
        self.label_8 = QtWidgets.QLabel(self.tab_2)
        self.label_8.setGeometry(QtCore.QRect(10, 60, 101, 19))
        self.label_8.setObjectName("label_8")
        self.label_8.setFont(font)
        font.setPointSize(10)
        font = QtGui.QFont()
        font.setPointSize(10)
        font = QtGui.QFont()
        font.setPointSize(9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setPointSize(10)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setPointSize(10)

        font = QtGui.QFont()
        font.setPointSize(10)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setPointSize(11)
    

        self.retranslateUi(Dialog)
        self.panel.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #rearrenge
        self.p_progress.setVisible(False)
      
        #actions
        self.p_button_nessus_file_select.clicked.connect(self.p_button_action_select_nessus_file)
        self.p_button_clear.clicked.connect(self.p_button_action_clear_nessus_files)
        self.p_swich.valueChanged.connect(self.p_swich_action)
        self.p_button_analyze.clicked.connect(self.p_button_action_analyze)
        self.p_edit_output_file.textChanged.connect(self.p_edit_changed_output_file_name)
    
        

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "esenturk - Nessus Parser"))
        self.p_button_nessus_file_select.setText(_translate("Dialog", "Nessus File Browse..."))
        self.label_2.setText(_translate("Dialog", "Nessus Files"))
        self.p_button_clear.setText(_translate("Dialog", "Clear"))
        self.p_button_analyze.setText(_translate("Dialog", "Analyze"))
        self.p_edit_output_file.setPlaceholderText(_translate("Dialog", "Output File Name"))
        self.label_5.setText(_translate("Dialog", "Local Area Network"))
        self.label_6.setText(_translate("Dialog", "Internet"))
        self.panel.setTabText(self.panel.indexOf(self.tab), _translate("Dialog", "Finding Parsing Mode"))
      
        self.label_8.setText(_translate("Dialog", "Nessus Files"))
    
        
       

    #custom actions
    def p_button_action_select_nessus_file(self):
        file , check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                               "", "Nessus Files (*.nessus);;All Files (*)")
        if check:
            #print(file)
            p_nessus_files.append(file)
            self.p_label_nessus_file_list.setPlainText(''.join([str(elem+"\n") for elem in p_nessus_files]))

    def p_button_action_clear_nessus_files(self):
        p_nessus_files.clear()
        self.p_label_nessus_file_list.setPlainText("")

    def p_swich_action(self,value):
        global p_scan_type
        if value == 1:
            p_scan_type = "local"
        if value == 2:
            p_scan_type = "internet"

    def p_edit_changed_output_file_name(self,value):
        global p_excel_output_name
        p_excel_output_name = value

    def p_button_action_analyze(self):
        global data
        global p_scan_type
        self.p_progress.setVisible(True)
        self.parseNessusXML(p_nessus_files)
        print("Total Finding: ", end="")
        print(len(data))
        self.p_progress.setValue(10)

        #sortings

        #------------------------order by port number----------
        data = sorted(data, key=lambda x: x[9])
        self.p_progress.setValue(20)

        #---------------------order by plugin id----------------
        data = sorted(data, key=lambda x: x[10],reverse=True)
        self.p_progress.setValue(30)

        #-----------------------order by criticallity---------------------
        data = sorted(data, key=lambda x: x[12],reverse=True)
        self.p_progress.setValue(40)

        #-----------------repeating data dictionary------------------------
        data_repeating={}
        data_cred= []
        temp_index=0
        #---------------------------classification ------------------------
        for data_each in data:
            #urgent-critic-high write default
            if data_each[12] >= 1:
                data_each[13]="x"
            if data_each[21] == "true" or data_each[22] == "true":
                data_each[13]+="(check exploit)"
            #loop for credental
            for f_n  in f_credential:
                if f_n == data_each[10]:
                    data_cred.append(data_each)
                    #data_cred[len(data_cred)-1][13] = "x"
                    data_each[13] = "c"
            if p_scan_type == "local":
                for l_d in f_lan_dnt_write:
                    if l_d == data_each[10]:
                        data_each[13]= "0"
                for l_w in f_lan_write:
                    if l_w == data_each[10]:
                        data_each[13]="x"
                for l_c in f_lan_control:
                    if l_c == data_each[10]:
                        data_each[13]="check?"
            if p_scan_type == "internet":
                for i_d in f_internet_dnt_write:
                    if i_d == data_each[10]:
                        data_each[13]="0"
                for i_w in f_internet_write:
                    if i_w == data_each[10]:
                        data_each[13]="x"
                for i_c in f_internet_control:
                    if i_c == data_each[10]:
                        data_each[13]="check?"
            #----description or synopsis check-----
            for repeat in repeat_keys:
                if data_each[16] is not None and data_each[17] is not None:
                    if repeat.lower() in data_each[16].lower()  or repeat.lower() in data_each[17].lower():
                        if str(str(data_each[5])+str(data_each[9])+repeat) in data_repeating:
                            data_repeating[str(data_each[5])+str(data_each[9])+repeat].append(temp_index)
                        else:
                            data_repeating[str(data_each[5])+str(data_each[9])+repeat]=[]
                            data_repeating[str(data_each[5])+str(data_each[9])+repeat].append(temp_index)
            temp_index+=1
        self.p_progress.setValue(50)

        #----------------------repeat data arranging---------------------            
        data_repeat=[]
        repeat_index=2
        for key in data_repeating:
            if len(data_repeating[key]) > 1:
                
                for r_o in data_repeating[key]:
                    temp_arr=[]
                    for i in range(len(data[r_o])):
                        if i == 13:
                            temp_arr.append("R")
                        else:
                            temp_arr.append(data[r_o][i])
                    data[r_o][13]="=Repeating!N"+str(repeat_index)
                    if temp_arr[21] == "true" or temp_arr[22]=="true":
                        temp_arr[13]="R(check exploit)"
                    data_repeat.append(temp_arr)
                    repeat_index +=1
        self.p_progress.setValue(70)

        #--------------------------excel creating---------------------------
        workbook = xlsxwriter.Workbook(str(p_excel_output_name+'.xlsx'))

        #-------------------------------vulnerabilities_raw sheet---------------------------------
        worksheet_raw = workbook.add_worksheet("Vulnerabilities_raw")

        #-----------------------vulnerabilities raw sheet without write column-------------------------------
        data_vuln = []
        for vuln in data:
            temp = []
            for i in range(len(vuln)):
                if i != 13:
                    temp.append(vuln[i])
            data_vuln.append(temp)

        self.p_progress.setValue(90)

        #-----------------------------vulnerabilities raw sheet------------------------------------
        format = 'A1:AH'+str(len(data)+1)
        worksheet_raw.add_table(format, {'data':data_vuln,
                                    'columns': [{'header': 'Report Name'},
                                                {'header': 'Host'},
                                                {'header': 'Scan Period'},
                                                {'header': 'OS'},
                                                {'header': 'Mac Address'},
                                                {'header': 'IP Adrress'},
                                                {'header': 'Domain Name'},
                                                {'header': 'NETBIOS Name'},
                                                {'header': 'Protocol'},
                                                {'header': 'Port'},
                                                {'header': 'Plug-in ID'},
                                                {'header': 'Service Name'},
                                                {'header': 'Criticality'},
                                                {'header': 'Risk Faktor'},
                                                {'header': 'Plug-in Name'},
                                                {'header': 'Synopsis'},
                                                {'header': 'Description'},
                                                {'header': 'Solution'},
                                                {'header': 'See Also'},
                                                {'header': 'Plug-in Output'},
                                                {'header': 'Exploit Available'},
                                                {'header': 'Metsaploit Exploit Available'},
                                                {'header': 'BID'},
                                                {'header': 'CVE'},
                                                {'header': 'XREF'},
                                                {'header': 'Plug-in Family'},
                                                {'header': 'Plug-in Version'},
                                                {'header': 'Vulnerability Publicion Date'},
                                                {'header': 'Plug-in Publication Date'},
                                                {'header':'cvss3_base_score'},
                                                {'header':'cvss3_vector'},
                                                {'header':'cvss_base_score'},
                                                {'header':'cvss_vector'},
                                                ]})


        #--------------------------prejudged worksheets------------------------------
        worksheet_prejudge = workbook.add_worksheet("Prejudged")

        #----------------------------prejudged table-----------------------------
        format = 'A1:AH'+str(len(data)+1)
        worksheet_prejudge.add_table(format, {'data':data,
                                    'columns': [{'header': 'Report Name'},
                                                {'header': 'Host'},
                                                {'header': 'Scan Period'},
                                                {'header': 'OS'},
                                                {'header': 'Mac Address'},
                                                {'header': 'IP Adrress'},
                                                {'header': 'Domain Name'},
                                                {'header': 'NETBIOS Name'},
                                                {'header': 'Protocol'},
                                                {'header': 'Port'},
                                                {'header': 'Plug-in ID'},
                                                {'header': 'Service Name'},
                                                {'header': 'Criticality'},
                                                {'header': 'Write?'},
                                                {'header': 'Risk Faktor'},
                                                {'header': 'Plug-in Name'},
                                                {'header': 'Synopsis'},
                                                {'header': 'Description'},
                                                {'header': 'Solution'},
                                                {'header': 'See Also'},
                                                {'header': 'Plug-in Output'},
                                                {'header': 'Exploit Available'},
                                                {'header': 'Metsaploit Exploit Available'},
                                                {'header': 'BID'},
                                                {'header': 'CVE'},
                                                {'header': 'XREF'},
                                                {'header': 'Plug-in Family'},
                                                {'header': 'Plug-in Version'},
                                                {'header': 'Vulnerability Publicion Date'},
                                                {'header': 'Plug-in Publication Date'},
                                                {'header':'cvss3_base_score'},
                                                {'header':'cvss3_vector'},
                                                {'header':'cvss_base_score'},
                                                {'header':'cvss_vector'},
                                                ]})


        #-----------------arrenging widths of main workbook------------------
        worksheet_raw.set_column('A:H', 12)
        worksheet_raw.set_column('I:J', 6)  
        worksheet_raw.set_column('K:N',8)
        worksheet_raw.set_column('O:T', 25) 
        worksheet_prejudge.set_column('A:H', 12)
        worksheet_prejudge.set_column('I:J', 6)  
        worksheet_prejudge.set_column('K:O',8)
        worksheet_prejudge.set_column('P:U', 25)   

        #-------------------------repeating worksheet----------------------
        if len(data_repeat) > 0:
            worksheet_repeat = workbook.add_worksheet("Repeating")
            format = 'A1:AH'+str(len(data_repeat)+1)
            worksheet_repeat.add_table(format, {'data':data_repeat,
                                        'columns': [{'header': 'Report Name'},
                                                    {'header': 'Host'},
                                                    {'header': 'Scan Period'},
                                                    {'header': 'OS'},
                                                    {'header': 'Mac Address'},
                                                    {'header': 'IP Adrress'},
                                                    {'header': 'Domain Name'},
                                                    {'header': 'NETBIOS Name'},
                                                    {'header': 'Protocol'},
                                                    {'header': 'Port'},
                                                    {'header': 'Plug-in ID'},
                                                    {'header': 'Service Name'},
                                                    {'header': 'Criticality'},
                                                    {'header': 'Write?'},
                                                    {'header': 'Risk Faktor'},
                                                    {'header': 'Plug-in Name'},
                                                    {'header': 'Synopsis'},
                                                    {'header': 'Description'},
                                                    {'header': 'Solution'},
                                                    {'header': 'See Also'},
                                                    {'header': 'Plug-in Output'},
                                                    {'header': 'Exploit Available'},
                                                    {'header': 'Metsaploit Exploit Available'},
                                                    {'header': 'BID'},
                                                    {'header': 'CVE'},
                                                    {'header': 'XREF'},
                                                    {'header': 'Plug-in Family'},
                                                    {'header': 'Plug-in Version'},
                                                    {'header': 'Vulnerability Publicion Date'},
                                                    {'header': 'Plug-in Publication Date'},
                                                    {'header':'cvss3_base_score'},
                                                    {'header':'cvss3_vector'},
                                                    {'header':'cvss_base_score'},
                                                    {'header':'cvss_vector'},
                                                    ]})
            #-------repeat workshett arrangement------------------
            worksheet_repeat.set_column('A:H', 12)
            worksheet_repeat.set_column('I:J', 6)  
            worksheet_repeat.set_column('K:O',8)
            worksheet_repeat.set_column('P:U', 25) 
        
    
        #-------------button format, maybe later---------
        button_format = workbook.add_format()
        button_format.set_bg_color('#808080')
       

        #--------------------close main workbook---------------
        workbook.close()
        self.p_progress.setValue(100)
        data = []


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
